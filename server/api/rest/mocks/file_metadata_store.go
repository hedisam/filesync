// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"sync"
)

// FileMetadataStoreMock is a mock implementation of rest.FileMetadataStore.
//
//	func TestSomethingThatUsesFileMetadataStore(t *testing.T) {
//
//		// make and configure a mocked rest.FileMetadataStore
//		mockedFileMetadataStore := &FileMetadataStoreMock{
//			DeleteFunc: func(ctx context.Context, key string) error {
//				panic("mock out the Delete method")
//			},
//		}
//
//		// use mockedFileMetadataStore in code that requires rest.FileMetadataStore
//		// and then make assertions.
//
//	}
type FileMetadataStoreMock struct {
	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, key string) error

	// calls tracks calls to the methods.
	calls struct {
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
	}
	lockDelete sync.RWMutex
}

// Delete calls DeleteFunc.
func (mock *FileMetadataStoreMock) Delete(ctx context.Context, key string) error {
	if mock.DeleteFunc == nil {
		panic("FileMetadataStoreMock.DeleteFunc: method is nil but FileMetadataStore.Delete was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, key)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedFileMetadataStore.DeleteCalls())
func (mock *FileMetadataStoreMock) DeleteCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}
