// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"sync"

	"github.com/hedisam/filesync/server/internal/store"
)

// UploadMetadataStoreMock is a mock implementation of rest.UploadMetadataStore.
//
//	func TestSomethingThatUsesUploadMetadataStore(t *testing.T) {
//
//		// make and configure a mocked rest.UploadMetadataStore
//		mockedUploadMetadataStore := &UploadMetadataStoreMock{
//			CreateFunc: func(ctx context.Context, md *store.ObjectMetadata) error {
//				panic("mock out the Create method")
//			},
//			PutObjectCompletedFunc: func(ctx context.Context, key string, objectID string) error {
//				panic("mock out the PutObjectCompleted method")
//			},
//		}
//
//		// use mockedUploadMetadataStore in code that requires rest.UploadMetadataStore
//		// and then make assertions.
//
//	}
type UploadMetadataStoreMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, md *store.ObjectMetadata) error

	// PutObjectCompletedFunc mocks the PutObjectCompleted method.
	PutObjectCompletedFunc func(ctx context.Context, key string, objectID string) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Md is the md argument value.
			Md *store.ObjectMetadata
		}
		// PutObjectCompleted holds details about calls to the PutObjectCompleted method.
		PutObjectCompleted []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
			// ObjectID is the objectID argument value.
			ObjectID string
		}
	}
	lockCreate             sync.RWMutex
	lockPutObjectCompleted sync.RWMutex
}

// Create calls CreateFunc.
func (mock *UploadMetadataStoreMock) Create(ctx context.Context, md *store.ObjectMetadata) error {
	if mock.CreateFunc == nil {
		panic("UploadMetadataStoreMock.CreateFunc: method is nil but UploadMetadataStore.Create was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Md  *store.ObjectMetadata
	}{
		Ctx: ctx,
		Md:  md,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, md)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedUploadMetadataStore.CreateCalls())
func (mock *UploadMetadataStoreMock) CreateCalls() []struct {
	Ctx context.Context
	Md  *store.ObjectMetadata
} {
	var calls []struct {
		Ctx context.Context
		Md  *store.ObjectMetadata
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// PutObjectCompleted calls PutObjectCompletedFunc.
func (mock *UploadMetadataStoreMock) PutObjectCompleted(ctx context.Context, key string, objectID string) error {
	if mock.PutObjectCompletedFunc == nil {
		panic("UploadMetadataStoreMock.PutObjectCompletedFunc: method is nil but UploadMetadataStore.PutObjectCompleted was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Key      string
		ObjectID string
	}{
		Ctx:      ctx,
		Key:      key,
		ObjectID: objectID,
	}
	mock.lockPutObjectCompleted.Lock()
	mock.calls.PutObjectCompleted = append(mock.calls.PutObjectCompleted, callInfo)
	mock.lockPutObjectCompleted.Unlock()
	return mock.PutObjectCompletedFunc(ctx, key, objectID)
}

// PutObjectCompletedCalls gets all the calls that were made to PutObjectCompleted.
// Check the length with:
//
//	len(mockedUploadMetadataStore.PutObjectCompletedCalls())
func (mock *UploadMetadataStoreMock) PutObjectCompletedCalls() []struct {
	Ctx      context.Context
	Key      string
	ObjectID string
} {
	var calls []struct {
		Ctx      context.Context
		Key      string
		ObjectID string
	}
	mock.lockPutObjectCompleted.RLock()
	calls = mock.calls.PutObjectCompleted
	mock.lockPutObjectCompleted.RUnlock()
	return calls
}
