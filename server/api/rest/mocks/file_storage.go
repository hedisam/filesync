// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"io"
	"sync"
)

// FileStorageMock is a mock implementation of rest.FileStorage.
//
//	func TestSomethingThatUsesFileStorage(t *testing.T) {
//
//		// make and configure a mocked rest.FileStorage
//		mockedFileStorage := &FileStorageMock{
//			PutObjectFunc: func(ctx context.Context, r io.Reader, objectID string) (string, int64, error) {
//				panic("mock out the PutObject method")
//			},
//		}
//
//		// use mockedFileStorage in code that requires rest.FileStorage
//		// and then make assertions.
//
//	}
type FileStorageMock struct {
	// PutObjectFunc mocks the PutObject method.
	PutObjectFunc func(ctx context.Context, r io.Reader, objectID string) (string, int64, error)

	// calls tracks calls to the methods.
	calls struct {
		// PutObject holds details about calls to the PutObject method.
		PutObject []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// R is the r argument value.
			R io.Reader
			// ObjectID is the objectID argument value.
			ObjectID string
		}
	}
	lockPutObject sync.RWMutex
}

// PutObject calls PutObjectFunc.
func (mock *FileStorageMock) PutObject(ctx context.Context, r io.Reader, objectID string) (string, int64, error) {
	if mock.PutObjectFunc == nil {
		panic("FileStorageMock.PutObjectFunc: method is nil but FileStorage.PutObject was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		R        io.Reader
		ObjectID string
	}{
		Ctx:      ctx,
		R:        r,
		ObjectID: objectID,
	}
	mock.lockPutObject.Lock()
	mock.calls.PutObject = append(mock.calls.PutObject, callInfo)
	mock.lockPutObject.Unlock()
	return mock.PutObjectFunc(ctx, r, objectID)
}

// PutObjectCalls gets all the calls that were made to PutObject.
// Check the length with:
//
//	len(mockedFileStorage.PutObjectCalls())
func (mock *FileStorageMock) PutObjectCalls() []struct {
	Ctx      context.Context
	R        io.Reader
	ObjectID string
} {
	var calls []struct {
		Ctx      context.Context
		R        io.Reader
		ObjectID string
	}
	mock.lockPutObject.RLock()
	calls = mock.calls.PutObject
	mock.lockPutObject.RUnlock()
	return calls
}
