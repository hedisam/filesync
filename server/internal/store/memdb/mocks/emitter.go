// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"sync"

	"github.com/hedisam/filesync/server/internal/store"
)

// EmitterMock is a mock implementation of memdb.Emitter.
//
//	func TestSomethingThatUsesEmitter(t *testing.T) {
//
//		// make and configure a mocked memdb.Emitter
//		mockedEmitter := &EmitterMock{
//			EmitFunc: func(ctx context.Context, obj *store.ObjectMetadata) error {
//				panic("mock out the Emit method")
//			},
//		}
//
//		// use mockedEmitter in code that requires memdb.Emitter
//		// and then make assertions.
//
//	}
type EmitterMock struct {
	// EmitFunc mocks the Emit method.
	EmitFunc func(ctx context.Context, obj *store.ObjectMetadata) error

	// calls tracks calls to the methods.
	calls struct {
		// Emit holds details about calls to the Emit method.
		Emit []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Obj is the obj argument value.
			Obj *store.ObjectMetadata
		}
	}
	lockEmit sync.RWMutex
}

// Emit calls EmitFunc.
func (mock *EmitterMock) Emit(ctx context.Context, obj *store.ObjectMetadata) error {
	if mock.EmitFunc == nil {
		panic("EmitterMock.EmitFunc: method is nil but Emitter.Emit was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Obj *store.ObjectMetadata
	}{
		Ctx: ctx,
		Obj: obj,
	}
	mock.lockEmit.Lock()
	mock.calls.Emit = append(mock.calls.Emit, callInfo)
	mock.lockEmit.Unlock()
	return mock.EmitFunc(ctx, obj)
}

// EmitCalls gets all the calls that were made to Emit.
// Check the length with:
//
//	len(mockedEmitter.EmitCalls())
func (mock *EmitterMock) EmitCalls() []struct {
	Ctx context.Context
	Obj *store.ObjectMetadata
} {
	var calls []struct {
		Ctx context.Context
		Obj *store.ObjectMetadata
	}
	mock.lockEmit.RLock()
	calls = mock.calls.Emit
	mock.lockEmit.RUnlock()
	return calls
}
