// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"sync"
)

// WatcherMock is a mock implementation of filesystem.Watcher.
//
//	func TestSomethingThatUsesWatcher(t *testing.T) {
//
//		// make and configure a mocked filesystem.Watcher
//		mockedWatcher := &WatcherMock{
//			AddFunc: func(dirPath string) error {
//				panic("mock out the Add method")
//			},
//		}
//
//		// use mockedWatcher in code that requires filesystem.Watcher
//		// and then make assertions.
//
//	}
type WatcherMock struct {
	// AddFunc mocks the Add method.
	AddFunc func(dirPath string) error

	// calls tracks calls to the methods.
	calls struct {
		// Add holds details about calls to the Add method.
		Add []struct {
			// DirPath is the dirPath argument value.
			DirPath string
		}
	}
	lockAdd sync.RWMutex
}

// Add calls AddFunc.
func (mock *WatcherMock) Add(dirPath string) error {
	if mock.AddFunc == nil {
		panic("WatcherMock.AddFunc: method is nil but Watcher.Add was just called")
	}
	callInfo := struct {
		DirPath string
	}{
		DirPath: dirPath,
	}
	mock.lockAdd.Lock()
	mock.calls.Add = append(mock.calls.Add, callInfo)
	mock.lockAdd.Unlock()
	return mock.AddFunc(dirPath)
}

// AddCalls gets all the calls that were made to Add.
// Check the length with:
//
//	len(mockedWatcher.AddCalls())
func (mock *WatcherMock) AddCalls() []struct {
	DirPath string
} {
	var calls []struct {
		DirPath string
	}
	mock.lockAdd.RLock()
	calls = mock.calls.Add
	mock.lockAdd.RUnlock()
	return calls
}
