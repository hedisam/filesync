// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/hedisam/filesync/client/indexer"
	"sync"
)

// FileIndexerMock is a mock implementation of filesystem.FileIndexer.
//
//	func TestSomethingThatUsesFileIndexer(t *testing.T) {
//
//		// make and configure a mocked filesystem.FileIndexer
//		mockedFileIndexer := &FileIndexerMock{
//			IndexFunc: func(ctx context.Context, fileMetadata *indexer.FileMetadata) error {
//				panic("mock out the Index method")
//			},
//		}
//
//		// use mockedFileIndexer in code that requires filesystem.FileIndexer
//		// and then make assertions.
//
//	}
type FileIndexerMock struct {
	// IndexFunc mocks the Index method.
	IndexFunc func(ctx context.Context, fileMetadata *indexer.FileMetadata) error

	// calls tracks calls to the methods.
	calls struct {
		// Index holds details about calls to the Index method.
		Index []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// FileMetadata is the fileMetadata argument value.
			FileMetadata *indexer.FileMetadata
		}
	}
	lockIndex sync.RWMutex
}

// Index calls IndexFunc.
func (mock *FileIndexerMock) Index(ctx context.Context, fileMetadata *indexer.FileMetadata) error {
	if mock.IndexFunc == nil {
		panic("FileIndexerMock.IndexFunc: method is nil but FileIndexer.Index was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		FileMetadata *indexer.FileMetadata
	}{
		Ctx:          ctx,
		FileMetadata: fileMetadata,
	}
	mock.lockIndex.Lock()
	mock.calls.Index = append(mock.calls.Index, callInfo)
	mock.lockIndex.Unlock()
	return mock.IndexFunc(ctx, fileMetadata)
}

// IndexCalls gets all the calls that were made to Index.
// Check the length with:
//
//	len(mockedFileIndexer.IndexCalls())
func (mock *FileIndexerMock) IndexCalls() []struct {
	Ctx          context.Context
	FileMetadata *indexer.FileMetadata
} {
	var calls []struct {
		Ctx          context.Context
		FileMetadata *indexer.FileMetadata
	}
	mock.lockIndex.RLock()
	calls = mock.calls.Index
	mock.lockIndex.RUnlock()
	return calls
}
